// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/micro/event-srv/proto/event/event.proto

/*
Package go_micro_srv_event_event is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/event-srv/proto/event/event.proto

It has these top-level messages:
	ReadRequest
	ReadResponse
	CreateRequest
	CreateResponse
	UpdateRequest
	UpdateResponse
	DeleteRequest
	DeleteResponse
	SearchRequest
	SearchResponse
	StreamRequest
	StreamResponse
*/
package go_micro_srv_event_event

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_micro_os_event "github.com/micro/go-os/event/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReadRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ReadRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ReadResponse struct {
	Record *go_micro_os_event.Record `protobuf:"bytes,1,opt,name=record" json:"record,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ReadResponse) GetRecord() *go_micro_os_event.Record {
	if m != nil {
		return m.Record
	}
	return nil
}

type CreateRequest struct {
	Record *go_micro_os_event.Record `protobuf:"bytes,1,opt,name=record" json:"record,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateRequest) GetRecord() *go_micro_os_event.Record {
	if m != nil {
		return m.Record
	}
	return nil
}

type CreateResponse struct {
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type UpdateRequest struct {
	Record *go_micro_os_event.Record `protobuf:"bytes,1,opt,name=record" json:"record,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateRequest) GetRecord() *go_micro_os_event.Record {
	if m != nil {
		return m.Record
	}
	return nil
}

type UpdateResponse struct {
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type DeleteRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DeleteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteResponse struct {
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type SearchRequest struct {
	// optional root_id
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// optional
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	// timeseries bounds
	From int64 `protobuf:"varint,3,opt,name=from" json:"from,omitempty"`
	To   int64 `protobuf:"varint,4,opt,name=to" json:"to,omitempty"`
	// range bounds
	Limit  int64 `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
	Offset int64 `protobuf:"varint,6,opt,name=offset" json:"offset,omitempty"`
	// order
	Reverse bool `protobuf:"varint,7,opt,name=reverse" json:"reverse,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SearchRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SearchRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SearchRequest) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *SearchRequest) GetTo() int64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *SearchRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *SearchRequest) GetReverse() bool {
	if m != nil {
		return m.Reverse
	}
	return false
}

type SearchResponse struct {
	Records []*go_micro_os_event.Record `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SearchResponse) GetRecords() []*go_micro_os_event.Record {
	if m != nil {
		return m.Records
	}
	return nil
}

type StreamRequest struct {
	// types to watch
	Types []string `protobuf:"bytes,1,rep,name=types" json:"types,omitempty"`
}

func (m *StreamRequest) Reset()                    { *m = StreamRequest{} }
func (m *StreamRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()               {}
func (*StreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *StreamRequest) GetTypes() []string {
	if m != nil {
		return m.Types
	}
	return nil
}

type StreamResponse struct {
	Record *go_micro_os_event.Record `protobuf:"bytes,1,opt,name=record" json:"record,omitempty"`
}

func (m *StreamResponse) Reset()                    { *m = StreamResponse{} }
func (m *StreamResponse) String() string            { return proto.CompactTextString(m) }
func (*StreamResponse) ProtoMessage()               {}
func (*StreamResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *StreamResponse) GetRecord() *go_micro_os_event.Record {
	if m != nil {
		return m.Record
	}
	return nil
}

func init() {
	proto.RegisterType((*ReadRequest)(nil), "go.micro.srv.event.event.ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "go.micro.srv.event.event.ReadResponse")
	proto.RegisterType((*CreateRequest)(nil), "go.micro.srv.event.event.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "go.micro.srv.event.event.CreateResponse")
	proto.RegisterType((*UpdateRequest)(nil), "go.micro.srv.event.event.UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "go.micro.srv.event.event.UpdateResponse")
	proto.RegisterType((*DeleteRequest)(nil), "go.micro.srv.event.event.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "go.micro.srv.event.event.DeleteResponse")
	proto.RegisterType((*SearchRequest)(nil), "go.micro.srv.event.event.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "go.micro.srv.event.event.SearchResponse")
	proto.RegisterType((*StreamRequest)(nil), "go.micro.srv.event.event.StreamRequest")
	proto.RegisterType((*StreamResponse)(nil), "go.micro.srv.event.event.StreamResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Event service

type EventClient interface {
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Event_StreamClient, error)
	// should not really be used since event sourcing is append only
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type eventClient struct {
	cc *grpc.ClientConn
}

func NewEventClient(cc *grpc.ClientConn) EventClient {
	return &eventClient{cc}
}

func (c *eventClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := grpc.Invoke(ctx, "/go.micro.srv.event.event.Event/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/go.micro.srv.event.event.Event/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := grpc.Invoke(ctx, "/go.micro.srv.event.event.Event/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Event_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Event_serviceDesc.Streams[0], c.cc, "/go.micro.srv.event.event.Event/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Event_StreamClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type eventStreamClient struct {
	grpc.ClientStream
}

func (x *eventStreamClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := grpc.Invoke(ctx, "/go.micro.srv.event.event.Event/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/go.micro.srv.event.event.Event/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Event service

type EventServer interface {
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	Stream(*StreamRequest, Event_StreamServer) error
	// should not really be used since event sourcing is append only
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
}

func RegisterEventServer(s *grpc.Server, srv EventServer) {
	s.RegisterService(&_Event_serviceDesc, srv)
}

func _Event_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.event.event.Event/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.event.event.Event/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.event.event.Event/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServer).Stream(m, &eventStreamServer{stream})
}

type Event_StreamServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type eventStreamServer struct {
	grpc.ServerStream
}

func (x *eventStreamServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Event_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.event.event.Event/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.event.event.Event/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Event_serviceDesc = grpc.ServiceDesc{
	ServiceName: "go.micro.srv.event.event.Event",
	HandlerType: (*EventServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _Event_Read_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Event_Create_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Event_Search_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Event_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Event_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Event_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/micro/event-srv/proto/event/event.proto",
}

func init() { proto.RegisterFile("github.com/micro/event-srv/proto/event/event.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 463 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0xc7, 0x9b, 0x7e, 0x64, 0xec, 0x8c, 0x46, 0x93, 0x35, 0x21, 0x53, 0x09, 0x51, 0x59, 0x1a,
	0xf4, 0x66, 0x2e, 0x74, 0x4f, 0x00, 0x63, 0x2f, 0xe0, 0x09, 0x71, 0x85, 0x50, 0xd7, 0x9e, 0x76,
	0x91, 0x96, 0x39, 0xd8, 0x5e, 0x24, 0x9e, 0x86, 0x27, 0xe1, 0xdd, 0x90, 0xbf, 0x20, 0x29, 0xaa,
	0x27, 0x95, 0x9b, 0x28, 0xe7, 0xf8, 0x7f, 0x7e, 0x3e, 0x39, 0x1f, 0x81, 0xc5, 0xb6, 0x34, 0x77,
	0x8f, 0xb7, 0x7c, 0x25, 0xab, 0x79, 0x55, 0xae, 0x94, 0x9c, 0x63, 0x83, 0x0f, 0xe6, 0x42, 0xab,
	0x66, 0x5e, 0x2b, 0x69, 0x82, 0xed, 0x9f, 0xdc, 0x79, 0x08, 0xdd, 0x4a, 0xee, 0xb4, 0x5c, 0xab,
	0x86, 0xfb, 0x13, 0xf7, 0x9c, 0xf0, 0x7f, 0x68, 0x5b, 0x79, 0x21, 0x75, 0x60, 0xb4, 0x78, 0x9e,
	0xc4, 0x5e, 0xc1, 0x89, 0xc0, 0xe5, 0x5a, 0xe0, 0xf7, 0x47, 0xd4, 0x86, 0x14, 0xd0, 0x2f, 0xd7,
	0x34, 0x9b, 0x66, 0xb3, 0x63, 0xd1, 0x2f, 0xd7, 0xec, 0x03, 0x3c, 0xf7, 0xc7, 0xba, 0x96, 0x0f,
	0x1a, 0xc9, 0x7b, 0xc8, 0x15, 0xae, 0xa4, 0xf2, 0x9a, 0x93, 0xc5, 0x4b, 0xfe, 0x27, 0x13, 0xa9,
	0x43, 0x22, 0xc2, 0x09, 0x44, 0x10, 0xb2, 0x8f, 0x30, 0xbe, 0x52, 0xb8, 0x34, 0x18, 0xef, 0x38,
	0x80, 0x71, 0x0a, 0x45, 0x64, 0xf8, 0x44, 0x2c, 0xf5, 0x73, 0xbd, 0xfe, 0x6f, 0x6a, 0x64, 0x04,
	0xea, 0x6b, 0x18, 0x7f, 0xc2, 0x7b, 0xfc, 0x4b, 0xdd, 0xad, 0xc7, 0x29, 0x14, 0x51, 0x10, 0x42,
	0x7e, 0x66, 0x30, 0xbe, 0xc1, 0xa5, 0x5a, 0xdd, 0xed, 0x89, 0x21, 0x04, 0x86, 0xe6, 0x47, 0x8d,
	0xb4, 0xef, 0x3c, 0xee, 0xdd, 0xfa, 0x36, 0x4a, 0x56, 0x74, 0x30, 0xcd, 0x66, 0x03, 0xe1, 0xde,
	0x6d, 0x9c, 0x91, 0x74, 0xe8, 0x3c, 0x7d, 0x23, 0xc9, 0x19, 0x8c, 0xee, 0xcb, 0xaa, 0x34, 0x74,
	0xe4, 0x5c, 0xde, 0x20, 0x2f, 0x20, 0x97, 0x9b, 0x8d, 0x46, 0x43, 0x73, 0xe7, 0x0e, 0x16, 0xa1,
	0x70, 0xa4, 0xb0, 0x41, 0xa5, 0x91, 0x1e, 0x4d, 0xb3, 0xd9, 0x33, 0x11, 0x4d, 0x76, 0x0d, 0x45,
	0x4c, 0x30, 0x74, 0xf1, 0xd2, 0x6a, 0x6d, 0x09, 0x34, 0xcd, 0xa6, 0x83, 0x74, 0xb1, 0xa2, 0x92,
	0x9d, 0xc3, 0xf8, 0xc6, 0x28, 0x5c, 0x56, 0xf1, 0x3b, 0xcf, 0x60, 0x64, 0xbf, 0xc5, 0x33, 0x8e,
	0x85, 0x37, 0xd8, 0x15, 0x14, 0x51, 0x76, 0xf0, 0xcc, 0x2c, 0x7e, 0x0d, 0x61, 0x74, 0x6d, 0x0f,
	0xc8, 0x17, 0x18, 0xda, 0x01, 0x24, 0xe7, 0x7c, 0xdf, 0xc8, 0xf3, 0xd6, 0xfc, 0x4e, 0xde, 0x3c,
	0x25, 0x0b, 0x5d, 0xeb, 0x91, 0xaf, 0x90, 0xfb, 0x91, 0x22, 0x6f, 0xf7, 0xc7, 0x74, 0x06, 0x77,
	0x32, 0x7b, 0x5a, 0xd8, 0xc6, 0xfb, 0xa2, 0xa7, 0xf0, 0x9d, 0xb9, 0x49, 0xe1, 0xbb, 0xfd, 0x63,
	0x3d, 0xf2, 0x0d, 0x72, 0x5f, 0xe5, 0x24, 0xbe, 0xdd, 0xae, 0x24, 0xbe, 0xd3, 0x30, 0xd6, 0x7b,
	0x97, 0xd9, 0xfc, 0xfd, 0x6e, 0xa4, 0x2e, 0xe8, 0x6c, 0x60, 0xea, 0x82, 0x9d, 0x35, 0x73, 0xe5,
	0xf1, 0x7b, 0x94, 0xc2, 0x77, 0x56, 0x31, 0x85, 0xdf, 0x59, 0xc9, 0xde, 0x6d, 0xee, 0x7e, 0x6e,
	0x97, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x3a, 0xe1, 0x64, 0x86, 0x5c, 0x05, 0x00, 0x00,
}
